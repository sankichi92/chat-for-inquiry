#!/usr/bin/env node

var app = require('../app');
var server = require('http').createServer(app);
var io = require('socket.io')(server);

var debug = {
  server: require('debug')('chat-for-inquiry:server'),
  io: require('debug')('chat-for-inquiry:socket.io')
};
debug.io.log = console.log.bind(console);

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', onConnecting);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug.server('Listening on ' + bind);
}

const OP_ROOM = 'operator room';

function onConnecting(socket) {
  debug.io('connected', socket.id);
  socket.broadcast.to(OP_ROOM).emit('connection', socket.id);

  // TODO: オペレータの認証を行うようにする
  socket.on('operator', function () {
    debug.io('operator connected');
    socket.join(OP_ROOM);
  });

  socket.on('message', function (msg) {
    debug.io('message from user', msg);
    socket.broadcast.to(OP_ROOM).emit('message', {
      from: socket.id,
      msg: msg
    });
  });

  socket.on('message from operator', function (data) {
    debug.io('message from operator', data);
    socket.broadcast.to(data.to).emit('message', data.msg);
  });

  socket.on('disconnect', function () {
    debug.io('disconnected', socket.id);
    io.to(OP_ROOM).emit('disconnect', socket.id);
  });

}
